// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.0
// source: notificator.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SendReply_ReplyType int32

const (
	SendReply_Success SendReply_ReplyType = 0
	SendReply_Fail    SendReply_ReplyType = 1
)

// Enum value maps for SendReply_ReplyType.
var (
	SendReply_ReplyType_name = map[int32]string{
		0: "Success",
		1: "Fail",
	}
	SendReply_ReplyType_value = map[string]int32{
		"Success": 0,
		"Fail":    1,
	}
)

func (x SendReply_ReplyType) Enum() *SendReply_ReplyType {
	p := new(SendReply_ReplyType)
	*p = x
	return p
}

func (x SendReply_ReplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendReply_ReplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_notificator_proto_enumTypes[0].Descriptor()
}

func (SendReply_ReplyType) Type() protoreflect.EnumType {
	return &file_notificator_proto_enumTypes[0]
}

func (x SendReply_ReplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendReply_ReplyType.Descriptor instead.
func (SendReply_ReplyType) EnumDescriptor() ([]byte, []int) {
	return file_notificator_proto_rawDescGZIP(), []int{1, 0}
}

type SendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To   string `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Body string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SendRequest) Reset() {
	*x = SendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notificator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRequest) ProtoMessage() {}

func (x *SendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notificator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRequest.ProtoReflect.Descriptor instead.
func (*SendRequest) Descriptor() ([]byte, []int) {
	return file_notificator_proto_rawDescGZIP(), []int{0}
}

func (x *SendRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SendRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type SendReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status SendReply_ReplyType `protobuf:"varint,2,opt,name=status,proto3,enum=pb.SendReply_ReplyType" json:"status,omitempty"`
}

func (x *SendReply) Reset() {
	*x = SendReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notificator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendReply) ProtoMessage() {}

func (x *SendReply) ProtoReflect() protoreflect.Message {
	mi := &file_notificator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendReply.ProtoReflect.Descriptor instead.
func (*SendReply) Descriptor() ([]byte, []int) {
	return file_notificator_proto_rawDescGZIP(), []int{1}
}

func (x *SendReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SendReply) GetStatus() SendReply_ReplyType {
	if x != nil {
		return x.Status
	}
	return SendReply_Success
}

var File_notificator_proto protoreflect.FileDescriptor

var file_notificator_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x31, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x70, 0x0a, 0x09, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x22, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x32, 0x35, 0x0a, 0x0b,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x53,
	0x65, 0x6e, 0x64, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_notificator_proto_rawDescOnce sync.Once
	file_notificator_proto_rawDescData = file_notificator_proto_rawDesc
)

func file_notificator_proto_rawDescGZIP() []byte {
	file_notificator_proto_rawDescOnce.Do(func() {
		file_notificator_proto_rawDescData = protoimpl.X.CompressGZIP(file_notificator_proto_rawDescData)
	})
	return file_notificator_proto_rawDescData
}

var file_notificator_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_notificator_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_notificator_proto_goTypes = []interface{}{
	(SendReply_ReplyType)(0), // 0: pb.SendReply.ReplyType
	(*SendRequest)(nil),      // 1: pb.SendRequest
	(*SendReply)(nil),        // 2: pb.SendReply
}
var file_notificator_proto_depIdxs = []int32{
	0, // 0: pb.SendReply.status:type_name -> pb.SendReply.ReplyType
	1, // 1: pb.Notificator.Send:input_type -> pb.SendRequest
	2, // 2: pb.Notificator.Send:output_type -> pb.SendReply
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_notificator_proto_init() }
func file_notificator_proto_init() {
	if File_notificator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_notificator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notificator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notificator_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_notificator_proto_goTypes,
		DependencyIndexes: file_notificator_proto_depIdxs,
		EnumInfos:         file_notificator_proto_enumTypes,
		MessageInfos:      file_notificator_proto_msgTypes,
	}.Build()
	File_notificator_proto = out.File
	file_notificator_proto_rawDesc = nil
	file_notificator_proto_goTypes = nil
	file_notificator_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NotificatorClient is the client API for Notificator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificatorClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error)
}

type notificatorClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificatorClient(cc grpc.ClientConnInterface) NotificatorClient {
	return &notificatorClient{cc}
}

func (c *notificatorClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error) {
	out := new(SendReply)
	err := c.cc.Invoke(ctx, "/pb.Notificator/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificatorServer is the server API for Notificator service.
type NotificatorServer interface {
	Send(context.Context, *SendRequest) (*SendReply, error)
}

// UnimplementedNotificatorServer can be embedded to have forward compatible implementations.
type UnimplementedNotificatorServer struct {
}

func (*UnimplementedNotificatorServer) Send(context.Context, *SendRequest) (*SendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterNotificatorServer(s *grpc.Server, srv NotificatorServer) {
	s.RegisterService(&_Notificator_serviceDesc, srv)
}

func _Notificator_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificatorServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notificator/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificatorServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notificator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Notificator",
	HandlerType: (*NotificatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Notificator_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notificator.proto",
}
